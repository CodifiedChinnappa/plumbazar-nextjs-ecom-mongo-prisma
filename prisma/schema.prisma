generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole       @default(USER)
  address       Address?
  accounts      Account[]
  wishlists     Product[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Review        Review[]
  Order         Order[]
  Rfq           Rfq[]
  DraftInvoice  DraftInvoice[]
  Stockin       Stockin[]
}

type Address {
  address String
  city    String
  state   String
  zip     String
  phone   String
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Store {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  userId    String    @db.ObjectId
  products  Product[] @relation("StoreToProduct")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Billboard {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  label      String
  imageUrl   String
  brand      Brand     @relation(fields: [brandId], references: [id])
  brandId    String    @db.ObjectId
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @db.ObjectId
}

model Brand {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  products  Product[]   @relation("BrandToProduct")
  name      String
  images    String[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Billboard Billboard[]
}

model Category {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  products  Product[]   @relation("CategoryToProduct")
  name      String
  images    String[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Billboard Billboard[]
}

model Product {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  storeId         String      @db.ObjectId
  store           Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  brandId         String      @db.ObjectId
  brand           Brand       @relation("BrandToProduct", fields: [brandId], references: [id])
  categoryId      String      @db.ObjectId
  category        Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name            String
  price           Int
  stock           Int         @default(0)
  purchasedPrice  Int?
  discountedPrice Int?
  isFeatured      Boolean     @default(false)
  isArchived      Boolean     @default(false)
  images          String[]
  reviews         Review[]
  globalRating    Int?
  numReviews      Int?
  features        Features[]
  description     String?
  orderItems      OrderItem[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  user            User?       @relation(fields: [userId], references: [id])
  userId          String?     @db.ObjectId

  @@index([storeId])
  @@index([brandId])
}

type Features {
  label String
  value String
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  rating    Int
  title     String
  review    String
  response  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

enum DeliveryStatus {
  PACKING
  SHIPPED
  OUT_TO_DELIVER
  DELIVERED
}

model Order {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  total          Int
  orderItems     OrderItem[]
  isPaid         Boolean        @default(false)
  address        Address
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  userId         String         @db.ObjectId
  user           User           @relation(fields: [userId], references: [id])
  deliveryStatus DeliveryStatus @default(PACKING)
  Rfq            Rfq[]

  @@index([userId])
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Int

  @@index([orderId])
  @@index([productId])
}

model Rfq {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId
  user      User      @relation(fields: [userId], references: [id])
  phone     Int
  notes     String?
  images    String[]
  order     Order?    @relation(fields: [orderId], references: [id])
  status    RfqStatus @default(REQUESTED)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  orderId   String?   @db.ObjectId
}

enum RfqStatus {
  REQUESTED
  PROCESSING
  FINALIZED
  CANCELED
}

model DraftInvoice {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  userId    String        @db.ObjectId
  user      User          @relation(fields: [userId], references: [id])
  customer  String        @db.ObjectId
  phone     Int
  address   Address
  products  DraftProducts
  notes     String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

type DraftProducts {
  productId     String @db.ObjectId
  quantity      Int
  price         Int
  PurchasePrice Int
}

model Vendor {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  email String? @unique

  phone   Int
  address Address?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Stockin {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  inBy      String          @db.ObjectId
  user      User            @relation(fields: [inBy], references: [id])
  notes     String?
  products  StockInProducts
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

type StockInProducts {
  productId     String @db.ObjectId
  quantity      Int
  price         Int
  PurchasePrice Int
}
